<?php

namespace backend\controllers;

use apivp1\models\User;
use common\helpers\YunhtHelper;
use common\models\Company;
use common\models\UserSearch;
use common\models\UserSigner;
use Yii;
use common\models\Contract;
use common\models\ContractSearch;
use yii\filters\AccessControl;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\ServerErrorHttpException;
use yii\web\UploadedFile;

/**
 * ContractController implements the CRUD actions for Contract model.
 */
class ContractController extends Controller {
	public function init() {
		parent::init(); // TODO: Change the autogenerated stub
		$this->enableCsrfValidation=false;
	}
	/**
	 * @inheritdoc
	 */
	public function behaviors()
	{
		return [
			'access' => [
				'class' => AccessControl::className(),
				'rules' => [
					[
						'allow' => true,
						'actions' => ['index','view','create','update','delete','query','send','company'],
						'roles' => ['@'],
					],
					[
						'allow' => true,
						'actions' => ['usersign','token'],
						'roles' => ['?'],
					],
				],
			],
		];
	}

	public function actions() {
		$action= parent::actions(); // TODO: Change the autogenerated stub
		unset($action['update'],$action['delete']);
		return $action;
	}

	/**
	 * Lists all Contract models.
	 * @return mixed
	 */
	public function actionIndex() {
		$searchModel  = new ContractSearch();
		$dataProvider = $searchModel->search(Yii::$app->request->queryParams);

		//是否添加企业信息
		$companyed=Company::find()->count();
		return $this->render('index', [
			'searchModel'  => $searchModel,
			'dataProvider' => $dataProvider,
			'companyed'=>$companyed
		]);
	}

	/**
	 * Displays a single Contract model.
	 *
	 * @param integer $id
	 *
	 * @return mixed
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	public function actionView($id) {
		return $this->render('view', [
			'model' => $this->findModel($id),
		]);
	}

	/**
	 * Creates a new Contract model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 * @return mixed
	 */
	public function actionCreate() {
		$model = new Contract();
		if (Yii::$app->request->isPost) {
			$model->File = UploadedFile::getInstance($model, 'contractfile');
			$upload=$model->upload();
			if ($upload) {
				$params=Yii::$app->request->post();
				$params['Contract']['contractfile']=$upload;
				//本地文件上传成功，上传至云
				$yunht=new YunhtHelper();
				//$yunht->getToken();
				$y_param['contractFile']=Yii::getAlias('@contractPath').'/'.$upload;
				$y_param['contractTitle']=$params['Contract']['contracttitle'];
				$y_result=$yunht->fileContract($y_param);
				if ($y_result['code']!=200){
					@unlink($y_param['contractFile']);
					throw new BadRequestHttpException(Yii::t('app',$y_result['msg']));
				}
				$params['Contract']['contractno']=$y_result['data']['contractId'];
				if ($model->load($params) && $model->save()) {
					return $this->redirect(['view', 'id' => $model->id]);
				}
				@unlink($y_param['contractFile']);
			}
		}


		return $this->render('create', [
			'model' => $model,
		]);
	}

	/**
	 * Updates an existing Contract model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 *
	 * @param integer $id
	 *
	 * @return mixed
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	public function actionUpdate($id) {
		$model = $this->findModel($id);

		if ($model->load(Yii::$app->request->post()) && $model->save()) {
			return $this->redirect(['view', 'id' => $model->id]);
		}

		return $this->render('update', [
			'model' => $model,
		]);
	}

	/**
	 * Deletes an existing Contract model.
	 * If deletion is successful, the browser will be redirected to the 'index' page.
	 *
	 * @param integer $id
	 *
	 * @return mixed
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	public function actionDelete($id) {
		$this->findModel($id)->delete();

		return $this->redirect(['index']);
	}

	/**
	 * Finds the Contract model based on its primary key value.
	 * If the model is not found, a 404 HTTP exception will be thrown.
	 *
	 * @param integer $id
	 *
	 * @return Contract the loaded model
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	protected function findModel($id) {
		if (($model = Contract::findOne($id)) !== null) {
			return $model;
		}

		throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
	}

	public function actionSend($id){
		$searchModel  = new UserSearch();
		$dataProvider = $searchModel->searchYHTUser(Yii::$app->request->queryParams);
		if (Yii::$app->request->isPost) {
			$params=Yii::$app->request->queryParams;
			$cid=$params['cid'];
			$model =$this->findModel($cid);
			$param['touid']=$params['id'];
			$param['status']=1;
			//添加签署者
			//1.用户签署signerid
			$signer=UserSigner::find()->where(['uid'=>$params['id']])->one();
			$comsignerid=Company::find()->one();
			$contractId=$model->contractno;
			$signers=[
				[
					'signerId'=>$comsignerid->signerid,
					'signPositionType'=>'0',
					'positionContent'=>'甲方使用',
					'signValidateType'=>'0',
					'signMode'=>'0',
					'signForm'=>'0'
				],
				[
					'signerId'=>$signer->signerid,
					'signPositionType'=>'0',
					'positionContent'=>'乙方使用',
					'signValidateType'=>'0',
					'signMode'=>'1',
					'signForm'=>'0'
				]
			];
			$yun=new YunhtHelper();
			$res=$yun->addSigner($contractId,$signers);
			//var_dump($res);exit();
			if ($res['code']!=200&&$res['code']!=400){
				throw new ServerErrorHttpException(Yii::t('app','Failed send contract to user'));
			}
			if ($model->load($param,'') && $model->save()) {
				return $this->redirect(['index']);
				//return $this->render('signs');
			}
		}
		$model = $this->findModel($id);
		return $this->render('send', [
			'searchModel'  => $searchModel,
			'dataProvider' => $dataProvider,
			'model'=>$model
		]);
	}

	public function actionToken($contractId=''){
		$coninfo=Contract::find()->where(['contractno'=>$contractId])->one();
		$sinfo=UserSigner::find()->where(['uid'=>$coninfo->touid])->one();
		$yun=new YunhtHelper();
		$token=$yun->Token($sinfo->signerid);
		\Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
		return ['token'=>$token[0]];
	}

	public function actionCompany(){
		$model=new Company();
		if (Yii::$app->request->isPost) {
			$params              = Yii::$app->request->post();
			$pdata=$params['Company'];
			$data['userName']    = $pdata['companyname'];
			$data['certifyType'] = $pdata['certifytype'];
			$data['certifyNum']  = $pdata['certifynum'];
			$data['phoneNo']     = $pdata['phoneno'];

			$yun=new YunhtHelper();
			$res=$yun->addCompany($data);
			//var_dump($res);exit();
			if ($res['code']!==200){
				throw new ServerErrorHttpException(Yii::t('app','Failed registered company'));
			}
			$cres=$yun->addCompanyMoulage($res['data']['signerId']);
			if ($cres['code']!==200){
				throw new ServerErrorHttpException(Yii::t('app','Failed registered moulage'));
			}
			$params['Company']['moulageid']=(string)$cres['data']['moulageId'];
			$params['Company']['signerid']=(string)$res['data']['signerId'];
			//var_dump($params);exit();
			if ($model->load($params)&&$model->save()){
				return $this->redirect(['index']);
			}
		}
		return $this->render('company',['model'=>$model]);
	}

	//查看合同
	public function actionQuery($id = '') {
		if (Yii::$app->request->isPost) {
			$company=Company::find()->one();
			$yun                         = new YunhtHelper();
			$token                       = $yun->Token($company->signerid);
			\Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

			return ['token' => $token[0]];
		}
		$model = $this->findModel($id);

		return $this->render('query', [
			'model' => $model
		]);
	}

	public function actionUsersign($id){
		$model = $this->findModel($id);
		return $this->renderPartial('signs',['model' => $model]);
	}

}
